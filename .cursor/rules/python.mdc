---
description: Guidelines for writing clean, maintainable, and human-readable Python code. Apply these rules when writing or reviewing code to ensure consistency and quality.
globs: *.py
---

## 命名规范

- 变量和函数使用小写下划线（`snake_case`）命名法。
- 常量使用大写下划线（`UPPER_CASE`）命名法。
- 类名使用大驼峰（`CamelCase`）命名法。
- 使用描述性命名，体现变量或函数的用途（例如：`is_loading`、`has_error`）。
- 模块文件使用小写下划线命名（`snake_case`），避免使用连字符。
- 名称应清晰说明其存在原因以及如何被使用。
- 避免缩写，除非缩写被普遍理解（例如：`id`、`url`）。
- 私有变量或方法以单下划线开头（例如：`_private_method`）。

## 代码组织

- 将相关代码定义靠近其使用位置。
- 共享的工具函数或常量应在专门的模块文件中定义并导出。
- 将共享工具函数或常量放置在 `utils` 目录中，文件名使用 `snake_case`（例如：`string_utils.py`）。
- 每个模块文件应专注于单一职责。
- 使用明确的包结构组织代码（例如：`package/subpackage/module.py`）。

## 函数

- 使用文档字符串（Docstring）为公共函数和类添加清晰的注释，遵循 Google 或 NumPy 风格。
- 函数名应以动词开头，描述其行为（例如：`calculate_total`、`fetch_data`）。
- 优先使用简洁的函数，复杂逻辑拆分为多个小函数。
- 对复杂逻辑的函数在文档字符串中提供清晰说明。

## 最佳实践

- 使用 `flake8` 和 `black` 确保代码风格一致性，遵循 PEP 8 规范。
- 避免使用全局变量，优先使用模块作用域或类属性。
- 使用上下文管理器（`with` 语句）管理资源（如文件、数据库连接）。
- 实现完善的空值检查（`None`），避免未定义行为。
- 使用 `is` 比较 `None`，而不是 `==`。
- 优先使用 `list` 推导式或生成器表达式简化代码，取代简单的 `for` 循环。

## 错误处理

- 创建针对特定领域的自定义异常类，继承自 `Exception`（例如：`class DataValidationError(Exception):`）。
- 对可能失败的操作使用 `try-except` 捕获特定异常，避免捕获过于宽泛的 `Exception`。
- 在异常处理中记录日志（使用 `logging` 模块）以便调试。
- 确保异常信息清晰，包含足够上下文（例如：`raise ValueError(f"Invalid value: {value}")`）。
- 对于需要返回值的情况，考虑返回 `(result, error)` 元组或使用 `Optional` 类型。

## Single Responsibility

- 每个函数只做一件明确的事情。
- 函数应小而聚焦，行数控制在 20-30 行以内（视复杂性而定）。
- 如果需要注释说明函数做了什么，应将其拆分为多个函数。
- 将重复的代码提取到可复用函数中。
- 通过适当的抽象共享通用逻辑。
- 保持单一信息源（避免多处维护相同逻辑）。
- 将相关代码放在一起，逻辑分组清晰。
- 使用统一的模块和文件夹命名约定（例如：`data_processing/`、`api_handlers/`）。
- 文件名应反映其内容（例如：`user_repository.py` 而非 `user.py`）。

## 类型注解

- 为保持代码简洁，本项目原则上不使用类型注解。

## 测试

- 为每个模块编写单元测试，放置在 `tests/` 目录中。
- 测试文件名以 `test_` 开头，与被测试模块对应（例如：`test_string_utils.py`）。
- 使用 `pytest` 框架组织测试，优先使用 `assert` 断言。
- 确保测试覆盖主要功能、边界情况和异常处理。